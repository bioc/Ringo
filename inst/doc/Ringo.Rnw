%\VignetteIndexEntry{R Investigation of NimbleGen Oligoarrays}
%\VignetteDepends{Ringo}
%\VignetteKeywords{microarray ChIP-chip NimbleGen nimblegen}
%\VignettePackage{Ringo} % name of package

%%%% HEAD SECTION: START EDITING BELOW %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

\documentclass[11pt, a4paper, fleqn]{article}
\usepackage{geometry}\usepackage{color}
\definecolor{darkblue}{rgb}{0.0,0.0,0.75}
\usepackage[%
baseurl={http://www.bioconductor.org},%
pdftitle={Introduction to Ringo},%
pdfauthor={Joern Toedling},%
pdfsubject={Ringo Vignette},%
pdfkeywords={Bioconductor},%
pagebackref,bookmarks,colorlinks,linkcolor=darkblue,citecolor=darkblue,%
filecolor=darkblue,urlcolor=darkblue,pagecolor=darkblue,%
raiselinks,plainpages,pdftex]{hyperref}

\usepackage{amsmath,a4,t1enc, graphicx}
\usepackage{natbib}
\bibpunct{(}{)}{;}{a}{,}{,}

\parindent0mm
\parskip2ex plus0.5ex minus0.3ex

\newcommand{\Robject}[1]{{\texttt{#1}}}
\newcommand{\Rfunction}[1]{{\texttt{#1}}}
\newcommand{\Rpackage}[1]{{\textit{#1}}}
\newcommand{\Rclass}[1]{{\textit{#1}}}
\newcommand{\Rmethod}[1]{{\textit{#1}}}
\newcommand{\Rfunarg}[1]{{\texttt{#1}}}

\newcommand{\myincfig}[3]{%
  \begin{figure}[h!tb]
    \begin{center}
      \includegraphics[width=#2]{#1}
      \caption{\label{#1}\textit{#3}}
    \end{center}
  \end{figure}
}

\addtolength{\textwidth}{2cm}
\addtolength{\oddsidemargin}{-1cm}
\addtolength{\evensidemargin}{-1cm}
\addtolength{\textheight}{2cm}
\addtolength{\topmargin}{-1cm}
\addtolength{\skip\footins}{1cm}


%%%%%%% START EDITING HERE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\begin{document}

\SweaveOpts{eps=false} % produce no 'eps' figures

\title{Ringo - R Investigation of NimbleGen Oligoarrays}
\author{Joern Toedling}
\date{}
\maketitle

<<prepare, echo=FALSE>>=
options(length=60)
set.seed(123)
@ 

\section{Introduction}

The package \Rpackage{Ringo} deals with the analysis of two-color
oligonucleotide microarrays used in ChIP-chip projects. 
The package was started to facilitate the analysis of
two-color microarrays from the company 
NimbleGen\footnote{for NimbleGen one-color microarrays,
we recommend the Bioconductor package \Rpackage{oligo}},
but the package has a modular design,
such that the platform-specific functionality is encapsulated
and analogous two-color tiling array platforms can also be
processed.
The package employs functions from other
packages of the Bioconductor project \citep{bioconductor}
and provides additional
ChIP-chip-specific and NimbleGen-specific functionalities.

<<loadpackage, results=hide>>=
library("Ringo")
@ 

If you use Ringo for analyzing your data, please cite: \nocite{Ringo2007}
\begin{itemize}
\item{Joern Toedling, Oleg Sklyar, Wolfgang Huber (2007) Ringo - an R/Bioconductor package for analyzing ChIP-chip readouts. \textsl{BMC Bioinformatics}, 8:221.}
\end{itemize}

\subsection*{Getting help}

If possible, please send questions about \Rpackage{Ringo} to the 
Bioconductor mailing list.\\
See \url{http://www.bioconductor.org/docs/mailList.html} \\
Their archive of questions and responses may prove helpful, too.


\section{Reading in the raw data}

For each microarray, the scanning output consists of two files, one holding
the Cy3 intensities, the other one the Cy5 intensities. These files are 
tab-delimited text files. 

The package comes with (shortened) example scanner output files,
in NimbleGen's \emph{pair} format.
These files are excerpts of the ChIP-chip demo data that NimbleGen 
provide at their FTP site for free download.
Their biological context, identification of DNA binding sites
of complexes containing Suz12 in human cells, 
has been described before \citep{Squazzo2006}.

<<locateData>>=
exDir <- system.file("exData",package="Ringo")
list.files(exDir, pattern="pair.txt")
head(read.delim(file.path(exDir,"MOD_20551_PMT1_pair.txt"), skip=1))[,c(1,4:7,9)]
@

In addition, there is a text file that holds details on the samples, 
including which two \emph{pair} files belong to which 
sample\footnote{You may have to construct such a targets file for your own 
data. The \texttt{scripts} directory of this package contains a script
\texttt{convertSampleKeyTxt.R} as an inspiration how the file 
\texttt{SampleKey.txt} provided by NimbleGen could be used for this.}.

<<exampleFilesTxt>>=
read.delim(file.path(exDir,"example_targets.txt"), header=TRUE) 
@ 

The columns \texttt{FileNameCy3} and \texttt{FileNameCy5} hold which of the
raw data files belong to which sample. 
The immuno-precipitated extract 
was colored with the Cy5 dye in the experiment, so the column \texttt{Cy5} 
essentially holds which antibody has been used for the immuno-precipitation, 
in this case one against the protein \texttt{Suz12}.

Furthermore, there is a file describing the probe categories
on the array (you might know these Spot Types files from \Rpackage{limma}
\citep{limma05}).

<<spottypes>>=
read.delim(file.path(exDir,"spottypes.txt"), header=TRUE) 
@ 

Reading all these files, we can read in the raw probe intensities
and obtain an object of class \Rclass{RGList}, a class defined
in package \Rpackage{limma}.

<<readNimblegen, results=hide>>=
exRG <- readNimblegen("example_targets.txt","spottypes.txt",path=exDir)
@ 

This object is essentially a list and contains the raw intensities of the two 
hybridizations for the red and green channel plus information on the probes on the array
and on the analyzed samples.

<<showRG>>=
head(exRG$R)
head(exRG$G)
head(exRG$genes)
exRG$targets
@ 

Users can alternatively supply raw two-color ChIP-chip readouts
from other platforms in \Rclass{RGList} format and consecutively use
\Rpackage{Ringo} to analyze that data.


\section{Quality assessment}

The \Rfunction{image} function allows us to look at the spatial 
distribution of the intensities on a chip. This can be useful to
detect obvious artifacts on the array, such as scratches, bright
spots, finger prints etc. that might render parts or all of the
readouts useless. 

<<imageRG0, eval=FALSE>>=
image(exRG, 1, channel="green", mycols=c("black","green4","springgreen"))
@ 

<<imageRG,eval=TRUE,results=hide,echo=FALSE>>=
jpeg("Ringo-imageRG.jpg", quality=100, height=400, width=360)
par(mar=c(1,1,4,1))
image(exRG, 1, channel="green", mycols=c("black","green4","springgreen"))
dev.off()
@

\myincfig{Ringo-imageRG}{0.6\textwidth}{Spatial distribution of raw probe intensities laid out by the probe position on the microarray surface.}

See figure \ref{Ringo-imageRG} for the image.
Since the provided example data set only holds the intensities for reporters
mapped to the forward strand of chromosome 9,
the image only shows the few green dots of these probes' positions.
We see, however, that these chromosome 9 reporters are well distributed
over the whole array surface rather than being clustered together in one
part of the array.

It may also be useful to look at the absolute distribution of 
the single-channel densities. \Rpackage{limma}'s function
\Rfunction{plotDensities} may be useful for this purpose.

<<plotDensities, fig=TRUE, include=TRUE, width=6, height=4>>=
plotDensities(exRG)
@
 
\Rpackage{Ringo}, similar to the Bioconductor package \Rpackage{tilingArray},
employs a \emph{probeAnno} environment to describe the mapping between 
reporters on the microarray and genomic positions.
Per chromosome, four vectors of equal length and ordering specify 
at which genomic positions reporter matches start and end, 
what identifiers or indices these reporters have in the intensities data,
and whether these reporters match uniquely to those genomic positions.

<<loadProbeAnno>>=
load(file.path(exDir,"exampleProbeAnno.rda"))
ls(exProbeAnno)
head(get("9.start",exProbeAnno))
head(get("9.index",exProbeAnno))
@ 

The package's \texttt{scripts} directory contains a script
\texttt{makeProbeAnno.R} that demonstrates how to generate such a
mapping object either from a NimbleGen \texttt{POS} file or
from result files of aligning the probe sequences to the genome.

In addition, the data file loaded above also contains a 
\emph{GFF (General Feature Format)}
file of all transcripts on human chromosome 9 annotated in the 
\href{http://www.ensembl.org/Mus_musculus/index.html}{Ensembl} database 
(release 46, August 2007).
The aforementioned script \texttt{makeProbeAnno.R} also contains
some example source code showing how the Bioconductor package
\Rpackage{biomaRt} can be used to generate such a GFF data frame.

<<showGFF>>=
head(exGFF[,c("name","symbol","chr","strand","start","end")])
@ 

To assess the impact of the small distance between probes 
on the data, one can look at the autocorrelation plot.
For each base-pair lag $d$, it is assessed how strong the intensities
of probes at genomic positions $x+d$ are correlated with the probe
intensities at positions $x$.

The computed correlation is plotted against the lag $d$.

<<autocorRG0, results=hide, fig=TRUE, include=TRUE, width=6, height=4>>=
exAc <- autocor(exRG, probeAnno=exProbeAnno, chrom="9", lag.max=1000)
plot(exAc)
@ 

We see some auto-correlation between probe position up to 800 base pairs
apart. Since the sonicated fragments that are hybridized to the
array have an average size in the range of up to 1000 bp, 
such a degree of auto-correlation up to this distance can be expected, 
but nevertheless has to be taken into account 
later on during data analysis.


\section{Preprocessing}

Following quality assessment of the raw data,
we perform normalization of the probe intensities
and derive fold changes of probes' intensities in the enriched sample
divided by their intensities in the non-enriched \emph{input} sample
and take the (generalized) logarithm of this ratios.

We use the variance-stabilizing normalization \citep{HuberVSN}
or probe intensities and generate an \texttt{ExpressionSet} object
of the normalized probe levels.

<<preprocess, eval=FALSE>>=
exampleX <- preprocess(exRG)
sampleNames(exampleX) <- 
 paste(exRG$targets$Cell.line,exRG$targets$Cy5,exRG$targets$Set,sep=".")
print(exampleX)
@ 
<<loadExampleX, echo=FALSE>>=
load(file.path(exDir,"exampleX.rda"))
print(exampleX)
@ 

Among the provided alternative preprocessing options is also the
Tukey-biweight scaling procedure that NimbleGen have used to scale ChIP-chip
readouts so that the data is centered on zero.

<<preprocessNG>>=
exampleX.NG <- preprocess(exRG, method="nimblegen")
sampleNames(exampleX.NG) <- sampleNames(exampleX)
@ 

The effects of different preprocessing procedures on the data, can be
assessed using the \Rfunction{corPlot} function.

<<comparePreprocessings, results=hide, fig=TRUE, include=TRUE, width=5, height=5>>=
corPlot(cbind(exprs(exampleX),exprs(exampleX.NG)),
        grouping=c("VSN normalized","Tukey-biweight scaled"))
@ 

The same function can also be used to assess the correlation between biological 
and technical replicates among the microarray samples.


\section{Visualize intensities along the chromosome}

<<chipAlongChrom0, eval=FALSE>>=
chipAlongChrom(exampleX, chrom="9", xlim=c(34318000,34321000), ylim=c(-2,4), probeAnno=exProbeAnno, gff=exGFF)
@ 
<<chipAlongChrom, echo=FALSE, results=hide>>=
load(file.path(exDir,"exampleX.rda"))
jpeg("Ringo-chipAlongChrom.jpg", quality=100, width=960, height=480)
par(mar=c(2.5,4.2,4,1.5), font.lab=2)
chipAlongChrom(exampleX, chrom="9", xlim=c(34318000,34321000), ylim=c(-2,4), probeAnno=exProbeAnno, gff=exGFF)
dev.off()
@ 

\myincfig{Ringo-chipAlongChrom}{0.98\textwidth}{Normalized probe intensities around the TSS of the \texttt{Nudt2} gene.}

See the result in figure \ref{Ringo-chipAlongChrom}.


\section{Smoothing of probe intensities}

Since the response of probes to the same amount of hybridized genome material
varies greatly, due to probe GC content, melting temperature, 
secondary structure etc., it is suggested to do a smoothing over individual 
probe intensities before looking for ChIP-enriched regions.

Here, we slide a window of 800 bp width along the chromosome and replace the
intensity at e genomic position $x_0$ by the median over the intensities
of those probes inside the window  that is centered at $x_0$.

<<smoothing, results=hide>>=
smoothX <- computeRunningMedians(exampleX, probeAnno=exProbeAnno,
modColumn = "Cy5", allChr = "9", winHalfSize = 400)
sampleNames(smoothX) <- paste(sampleNames(exampleX),"smoothed")
@ 
<<plotSmoothed0, eval=FALSE, results=hide>>=
chipAlongChrom(exampleX, chrom="9", xlim=c(34318000,34321000), ylim=c(-2,4), probeAnno=exProbeAnno, gff=exGFF)
chipAlongChrom(smoothX, chrom="9", xlim=c(34318000,34321000), probeAnno=exProbeAnno, itype="l", ilwd=4, paletteName="Spectral", add=TRUE)
@ 

<<plotSmoothed, echo=FALSE, results=hide>>=
jpeg("Ringo-smoothAlongChrom.jpg", quality=100, width=960, height=480)
par(mar=c(2.5,4.2,4,1.5), font.lab=2)
chipAlongChrom(exampleX, chrom="9", xlim=c(34318000,34321000), ylim=c(-2,4), probeAnno=exProbeAnno, gff=exGFF)
chipAlongChrom(smoothX, chrom="9", xlim=c(34318000,34321000), probeAnno=exProbeAnno, itype="l", ilwd=4, paletteName="Spectral", add=TRUE)
dev.off()
@ 

\myincfig{Ringo-smoothAlongChrom}{0.98\textwidth}{Normalized and smoothed probe intensities around the TSS of the \texttt{Nudt2} gene.}

See the smoothed probe levels in figure \ref{Ringo-smoothAlongChrom}.


\section{Peak finding}

To identify antibody-enriched genomic regions, we require the following:

\begin{itemize}
\item smoothed intensities of probes mapped to this region are exceed a certain threshold $y_0$
\item the region contains at least three probe match positions
\item each affected position is less than a defined maximum distance $d_{max}$ 
apart from another affected position in the region (we require a certain
probe spacing to have confidence in detected peaks\footnote{Note
that the term ''peak'', while commonly used in ChIP-chip context,
is slightly misleading and the term "ChIP-enriched region" would be
more appropriate. Within such regions the actual signal could show two
or more actual signal peaks or none at all (long plateau). For
succinctness sake, we use the term "peak" for a ChIP-enriched region,
though.})
\end{itemize}

For setting the threshold $y_0$, one has to assess the 
expected (smoothed) probe levels in non-enriched genomic regions,
i.e. the \emph{null distribution} of probe levels.
In a perfect world, we could use a log ratio of $0$ as definite cut-off.
In this case the ``enriched'' DNA and the input DNA sample would be
present in equal amounts, so no antibody-bound epitope, 
could be found at this genomic site.
In practice, there are some reasons why zero may be a too naive cut-off
for calling a probe-hit genomic site \emph{enriched} in our case.
See \citet{BourgonPhD} for an extensive discussion on problematic issues
with ChIP-chip experiments. We will just briefly mention a few issues
here.
For once, during the immuno-precipitation, some non-antibody-bound regions may be
pulled down in the assay and consequently enriched or some enriched DNA may
cross-hybridize to other probes. 
Furthermore, since genomic fragments after sonication are mostly a lot
larger than the genomic distance between two probe-matched genomic positions,
auto-correlation between probes certainly is existent.
Importantly, different probes measure the same DNA amount with a different
efficiency even after normalizing the probe levels, due to 
sequence properties of the probe, varying quality of the synthesis of
probes on the array and other reasons.
To ameliorate this fact, we employ the sliding-window smoothing approach.

Please note that this procedure was developed to identify genomic regions
enriched for histone modifications rather than transcription factor binding 
sites. The frequency and extent of
genomic regions with modified histones is expected to be much larger than,
say, regions containing binding sites for a certain transcription factor.
In that case one cannot assume that the large majority of probes does not
show enrichment. 
In the example data case, however, we look for enriched 
transcription-factor-bound regions. For this setup a number of alternative,
and likely superior, algorithms for detecting enriched regions
have been suggested, 
some being available in other Bioconductor packages, too.

The aforementioned issues make it difficult to come up with a reasonable 
estimate for the null distribution of smoothed probe levels 
in non-enriched genomic regions. 
We simulate such a distribution by permuting the probe match positions 
on the chromosome. 
We take the 99\% quantile of these smoothed intensities 
as the threshold $y_0$
\footnote{To get a more realistic estimate for such a null distribution, 
one should shuffle all chromosomes' positions and repeat the whole process
many times.}.

<<permutedSmoothing>>=
permProbeAnno <- copyEnv(exProbeAnno)
sampled.index <- sample(get("9.index",env=exProbeAnno))
assign("9.index", sampled.index, env=permProbeAnno)
sampledX <- computeRunningMedians(exampleX, probeAnno=permProbeAnno,
modColumn = "Cy5", allChr = c("9"), winHalfSize = 400, verbose=FALSE)
(y0 <- quantile(exprs(sampledX), 0.99, na.rm=TRUE))
@ 

Since antibodies vary in their efficiency to bind to their target epitope,
we suggest to obtain a different threshold for each antibody. In the example
data, however, we have only one antibody against \texttt{Suz12}.

While this threshold worked well for us, 
we do not claim this way to be a gold standard for determining the
threshold. 
In particular, it does not take into account the auto-correlation between
near-by probes.

<<peakFinding, results=hide>>=
peaksX <- findPeaksOnSmoothed(smoothX, probeAnno=exProbeAnno, thresholds=y0, allChr="9", distCutOff=600, cellType="human")
peaksX <- relatePeaks(peaksX, exGFF)
peaksXD <- as.data.frame.peakList(peaksX)
@ 
<<showPeaks>>=
peaksXD
@ 

<<plotPeak0, eval=FALSE, results=hide>>=
plot(peaksX[[1]], smoothX, probeAnno=exProbeAnno, gff=exGFF, paletteName="Spectral")
@ 
<<plotPeak, echo=FALSE, results=hide>>=
jpeg("Ringo-plotPeak.jpg", quality=100, width=960, height=480)
par(mar=c(2.5,4.2,4,1.5), font.lab=2)
plot(peaksX[[1]], smoothX, probeAnno=exProbeAnno, gff=exGFF, paletteName="Spectral")
dev.off()
@ 

\myincfig{Ringo-plotPeak}{0.98\textwidth}{One of the identified Suz12-antibody
enriched regions on chromosome 9.}

Figure \ref{Ringo-plotPeak} displays the identified peak, which is the one
upstream of the \texttt{Nudt2} gene. This peak was obvious in plots of the 
normalized data (see figure \ref{Ringo-smoothAlongChrom}).
And while it is reassuring that our method recovers it as well, a number
of other approaches would certainly have reported it as well.

\section{Concluding Remarks}

The package \Rpackage{Ringo} aims to facilitate the analysis 
ChIP-chip readouts.
We constructed it during the analysis of a ChIP-chip experiment for the 
genome-wide identification of modified histone sites on data
gained from NimbleGen two-color microarrays. 
Analogous two-color microarray platforms, however, can also be processed.
Key functionalities of \Rpackage{Ringo} are data read-in,
quality assessment, preprocessing of the raw data,
and visualization of the raw and preprocessed data.
The package contains a heuristic algorithm for the detection of
for ChIP-enriched genomic regions, too. 
While this algorithm worked quite well on our data, 
we do not claim it to be the definite algorithm for that task.

This vignette was generated using the following package versions:

<<sessionInfo, echo=FALSE, results=tex>>=
toLatex(sessionInfo())
@

\clearpage
\small
\section*{Acknowledgments}

I thank Wolfgang Huber Oleg Sklyar, Tammo Kr\"uger, Richard Bourgon,
Matt Ritchie, and Pos Bote for source code contributions to
and lots of helpful suggestions on Ringo, 
Todd Richmond and NimbleGen Systems, Inc. for 
providing us with the example ChIP-chip data, and Jenny J. Fischer and
Silke Sperling for thought-provoking contributions.\\
This work was supported by the
European Union (FP6 HeartRepair, LSHM-CT-2005-018630).


%%% BIBLIOGRAPHY STARTS HERE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\bibliographystyle{abbrvnat}
\bibliography{Ringo-Bibliography.bib}

\end{document}
